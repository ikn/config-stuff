#! /usr/bin/env python3

import sys
from subprocess import check_call
import functools

from bspwmpython.querytree import parse_tree, get_raw_tree


def watch_tree ():
    while True:
        sys.stdin.readline()
        yield parse_tree(get_raw_tree())


def get_new_windows (old_tree, new_tree):
    for m_name in old_tree.keys() | new_tree.keys():
        old_m = old_tree.get(m_name, {})
        new_m = new_tree.get(m_name, {})
        for d_name in old_m.keys() | new_m.keys():
            old_d = old_m.get(d_name, [])
            new_d = new_m.get(d_name, [])
            for w_id in set(new_d) - set(old_d):
                yield w_id


def adjust_windows (w_ids_iter):
    w_ids = list(w_ids_iter)
    if w_ids:
        check_call(sys.argv[1:] + w_ids)


def handle_changes (old_tree, new_tree):
    adjust_windows(get_new_windows(old_tree, new_tree))
    return new_tree


functools.reduce(handle_changes, watch_tree())
