#! /usr/bin/env python3

import os
import sys
import json
from subprocess import check_call, check_output

dirns = ['west', 'north', 'east', 'south']


def fail (*args):
    print(*args)
    sys.exit(2)


def mkname (m, col, row):
    return '{}-{}-{}'.format(m, col + 1, row + 1)


try:
    w = int(os.environ.get('BSPWM_DESKTOP_WALL_WIDTH', 3))
    h = int(os.environ.get('BSPWM_DESKTOP_WALL_HEIGHT', 2))
    if w <= 0 or h <= 0:
        raise ValueError()
except ValueError:
    fail('invalid width/height specified')
if len(sys.argv) < 2:
    fail('expected command argument')
cmd = sys.argv[1]

if cmd == 'init':
    ms = check_output(['bspc', 'query', '-M']).decode().splitlines()
    for i, m in enumerate(ms):
        check_call(['bspc', 'monitor', m, '-d'] +
            [mkname(i + 1, j % w, j // w) for j in range(w * h)])

elif cmd in ('switch', 'switchwithwindow'):
    with_window = cmd == 'switchwithwindow'

    if len(sys.argv) < 3:
        fail('expected direction argument')
    dirn = sys.argv[2].lower()
    if dirn in dirns:
        dirn = dirns.index(dirn)
    else:
        fail('invalid direction argument:', dirn)

    tree = check_output(['bspc', 'query', '-T', '-d', 'focused'])
    current = json.loads(tree.decode())['name'].split('-')
    try:
        m = '-'.join(current[:-2])
        x = int(current[-2]) - 1
        y = int(current[-1]) - 1
    except (ValueError, IndexError):
        fail('unexpected desktop name:', current, '(call `desktop-wall init`)')

    if (x > 0, y > 0, x < w - 1, y < h - 1)[dirn]:
        pos = [x, y]
        pos[dirn % 2] += -1 if dirn < 2 else 1
        target = mkname(m, *pos)

        if with_window:
            w_id = check_output(['bspc', 'query', '-N', '-n', 'focused']) \
                .decode().strip()
            if w_id:
                check_call(['xdotool', 'windowunmap', str(w_id)])
            else:
                with_window = False
        check_call(['bspc', 'desktop', '-f', target])
        if with_window:
            check_call(['xdotool', 'windowmap', str(w_id)])

else:
    fail('no such command:', cmd)
