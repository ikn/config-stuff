#! /bin/bash

export JAR=fastjar
export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0
export DUSTFORCE_INSTALL_DIR=/opt/dustforce-dustmod
export GW2_DPSREPORT_URL="http://a.dps.report"
export GW2_DPSREPORT_SIZE_THRESHOLD_CUSTOM=150000
export GW2_DPSREPORT_CLIPBOARD=clipboard
export GW2_DPSREPORT_WEB_BROWSER='qutebrowser --loglevel critical'

source ~/bin/specific/mount-ftp

alias fcsh-wrap='fcsh-wrap -optimize=true -static-link-runtime-shared-libraries=true'
alias fcsh-wrap-dbg='fcsh-wrap -compiler.debug=true'
alias transmission-daemon='transmission-daemon -g ~/.config/transmission/'
alias gw2-dpsreport='gw2-dpsreport --clipboard --open-in-browser'
alias fplog='tail -n 0 -f ~/.macromedia/Flash_Player/Logs/flashlog.txt 2>/dev/null'
alias fp='flashplayerdebugger *.swf 2> /dev/null'
alias toggle-redshift='killall -USR1 redshift'

_ytdl-limit-res () {
    echo "best[height<=$1]/bestvideo[height<=$1]+bestaudio"
}

alias youtube-dl='youtube-dl --prefer-free-formats -f "$(_ytdl-limit-res 720)"'

export YTDL_OUTPUT_DIR=~/media/videos
export YTDL_OUTPUT_FORMAT='[%(uploader)s] [%(upload_date)s] %(title)s [%(id)s].%(ext)s'

# function so vars are evaluated at runtime
_ytdl () {
    youtube-dl -o "$YTDL_OUTPUT_DIR/$YTDL_OUTPUT_FORMAT" "$@"
}

alias ytdl='_ytdl --no-playlist'
alias ytdl-low='ytdl -f "$(_ytdl-limit-res 360)"'
alias ytdl-playlist='YTDL_OUTPUT_DIR="$YTDL_OUTPUT_DIR/%(playlist)s" _ytdl'
alias ytdl-low-playlist='ytdl-playlist -f "$(_ytdl-limit-res 360)"'
alias _ytdl-new='ytdl `cat ~/media/dl-list` && rm ~/media/dl-list'
alias _ytdl-new-low='ytdl-low `cat ~/media/dl-list` && rm ~/media/dl-list'

_ytdl-new-aud () {
    xargs -r youtube-dl --no-playlist -f bestaudio \
        -o ~/media/podcasts/"$YTDL_OUTPUT_FORMAT" \
        < ~/media/dl-list-aud && \
        rm ~/media/dl-list-aud
}

alias ytdl-new='_ytdl-new-aud; _ytdl-new'
alias ytdl-new-low='_ytdl-new-aud; _ytdl-new-low'

ytvlc () {
    vlc "$(youtube-dl -g "$@")" --meta-title="$(youtube-dl -e "$1")"
}

alias ytvlc-low='ytvlc -f "$(_ytdl-limit-res 360)"'

twitchdl () {
    local id="$(date +%s)-$RANDOM"
    local attempt=1
    while true; do
        echo "stream [$id-$attempt]".mp4
        streamlink -o "stream [$id-$attempt]".mp4 "$1" best \
            --http-header Client-ID=jzkbprff40iqj646a697cyrvl0zt2m6 && break
        attempt="$((attempt+1))"
    done
}

fl () {
    if [ -z "$1" ]; then
        n=$(flash)
        if [ -z "$n" ]; then
            # nothing to play
            return
        else
            # play first video
            n=$(echo "$n" | head -n1 | cut -d" " -f1)
        fi
    else
        # got video to play
        n="$1"
    fi
    flash "$n" vlc
}

flcp () {
    if [ "$#" -ge 2 ]; then
        dest="$2"
        tmp="$(mktemp -d)"
        flash "$1" cp -t "$tmp"
        mv "$tmp/$1" "$dest"
        rm -rf "$tmp"
    else
        if [ -n "$1" ]; then
            dest="$1"
        else
            dest=.
        fi

        flash | cut -d" " -f1 | while read num; do
            flash "$num" cp -t "$dest"
        done
    fi
}

flcpto () {
    n="$(flash | head -n1 | cut -d" " -f1)"
    echo "$n"
    flcp "$n" "$1"
}

tmw () {
    local args=()
    for arg in "$@"; do
        args+=(~/.config/tellmewhen/"$arg".json)
    done
    tellmewhend -d 1 --min-event-separation 2 -- "${args[@]}"
}

_complete_tmw () {
    IFS=$'\n' COMPREPLY=($(IFS=$'\n' compgen -W "$(
        ls ~/.config/tellmewhen |
            while read -r f; do
                [[ "$f" == *.json ]] && echo "${f%.json}"
            done
    )" "$2"))
}
complete -F _complete_tmw tmw

if [ "$STARTIRCREMOTE" = "y" ]; then
    irc () {
        TERM=xterm-256color ssh $host "bash -l -c 'tmux attach'" && exit
    }

    host=rpi irc || host=home irc
fi


enc-recording-quick () {
    mkdir -p out
    for f in "$@"; do
        ffmpeg -i "$f" -c:v libx264 -preset superfast -c:a copy out/"$f"
    done
}

enc-recording-gw2yt () {
    mkdir -p out
    for f in "$@"; do
        ffmpeg -i "$f" -map 0:0 -map 0:2 \
            -c:v copy -c:a libvorbis -ab 128k -af 'volume=+20dB' out/"$f"
    done
}

enc-trim-all () {
    local f;
    mkdir -p out/source
    for f in "$@"; do
        echo "$f"
        if enc-trim "$f" out/"$(basename "$f")"; then
            mv "$f" out/source/"$(basename "$f")"
        else
            echo ERROR
        fi
    done 2> out/log
}

gw2-repair () {
    wine "$WINEPREFIX/drive_c/Program Files/Guild Wars 2/Gw2-64.exe" --repair
}
