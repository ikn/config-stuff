#! /bin/bash

export CFLAGS="$CFLAGS -fdiagnostics-color=always"

alias locate='locate -i'
alias iotop='sudo iotop -o'
alias nethogs='sudo nethogs enp4s0'
alias free='free -h'
alias info='info --vi-keys'
alias dmesg='sudo dmesg -H -w'
alias df='df -h'

alias crontab='fcrontab'
export PYTHON2=python2
export PYTHON3=python3
export NODEJS=nodejs
export JAVA_HOME=/usr/lib/jvm/default
export JAVA=java
export JAVA8_HOME=/usr/lib/jvm/java-8-openjdk
export JAVA8="$JAVA8_HOME"/bin/java
export JAVA11_HOME=/usr/lib/jvm/java-11-openjdk
export JAVA11="$JAVA11_HOME"/bin/java

alias aoeu='setxkbmap gb -option -option caps:escape -option terminate:ctrl_alt_bksp'
alias asdf='setxkbmap gb dvorakukp -option -option caps:escape -option terminate:ctrl_alt_bksp'

man () {
    local w=100
    [ "$COLUMNS" -lt "$w" ] && w="$COLUMNS"
    env MANWIDTH="$w" \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

alias p='python -ic "
import os, atexit, readline, rlcompleter
hist = \"/home/j/.pyhistory\"
def save_history(historyPath = hist):
    import readline
    readline.write_history_file(hist)
atexit.register(save_history)
if os.path.exists(hist):
    readline.read_history_file(hist)
readline.parse_and_bind(\"tab: complete\")
del os, atexit, readline, rlcompleter"'

alias p2='python2 -ic "
import os, atexit, readline, rlcompleter
hist = \"/home/j/.pyhistory\"
def save_history(historyPath = hist):
    import readline
    readline.write_history_file(hist)
atexit.register(save_history)
if os.path.exists(hist):
    readline.read_history_file(hist)
readline.parse_and_bind(\"tab: complete\")
del os, atexit, readline, rlcompleter"'

mount-encrypted () {
    sudo cryptsetup --type luks open "$1" "$2"
    udisksctl mount -b /dev/mapper/"$2"
}

umount-encrypted () {
    udisksctl unmount -b /dev/mapper/"$1"
    sudo cryptsetup close "$1"
}

mount-mtp () {
    local d="$MNT_DIR"/mtp
    mkdir -p "$d"
    aft-mtp-mount "$d" || {
        rmdir mnt 2> /dev/null
        return 1
    }
}

umount-user () {
    if [ "$#" -eq 0 ]; then
        ls 2> /dev/null "$MNT_DIR"
    else
        local d
        for d in "$@"; do echo "$d"; done
    fi | {
        local d
        while read -r d; do
            fusermount -u -z "$MNT_DIR/$d"
            rmdir "$MNT_DIR/$d" || exit 1
        done
    }
    local rtn="$?"

    rmdir "$MNT_DIR" 2> /dev/null
    return "$rtn"
}

docker-cleanup () {
    sudo docker container prune -f
    sudo docker volume prune -f
    sudo docker image prune -f
}

docker-remove-containers () {
    sudo docker container ls -qa |
        xargs -r sudo docker container stop
    sudo docker container ls -qa |
        xargs -r sudo docker container rm
}
