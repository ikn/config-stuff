#! /bin/bash

source ~/.profile

export HISTFILESIZE=
export HISTSIZE=
export HISTCONTROL=ignoredups
export HISTFILE=~/.bash_history_real
shopt -s histappend
PS1='\[\e[1;32m\][\u@\h \W]\$\[\e[0m\] '

alias grep='grep --color=auto'
alias less='less -i'
alias ls='ls --color=auto'
alias ssh='ssh -t'
alias ag='ag -i'

alias v='vim'
alias l='ls'
alias aw='ag -sw'
alias sedr='sed -r'
alias py='python'
alias py2='python2'
alias :q='exit'
alias pb="curl -F 'sprunge=<-' http://sprunge.us"

show () {
    declare -f "$1" || alias "$1"
}

fix-perms () {
    for dir in "$@"; do
        find "$dir" -type d | xargs chmod 755 2> /dev/null
        find "$dir" -type f | xargs chmod 644 2> /dev/null
    done
}

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

nhardlinks () {
    if [ -f "$1" ]; then
        ls -l "$1" | awk '{ print $2 }'
    else
        echo 1>&2 "not a file: $1"
        return 1
    fi
}

search () {
    ag -ug "$@"
}

sumfs () {
   ls -l "$@" | awk '{print $5}' | paste -sd+ - | bc
}

# git

git () {
    case "$1" in
    fetch)
        command git fetch -t "${@:2}"
        ;;
    *)
        command git "$@"
        ;;
    esac
}

gitag () {
    git diff --relative -z --name-only HEAD | xargs -0 ag "$@" 2> /dev/null
}

alias gitaw='gitag -sw'

alias gitbranch='git rev-parse --abbrev-ref HEAD'

logorigin () {
    git log "origin/$(git rev-parse --abbrev-ref HEAD)" "$@"
}

gitnew () {
    args=()
    opts=()
    for arg in "$@"; do
       if [[ "$arg" == -* ]]; then
            opts+=("$arg")
        else
            args+=("$arg")
        fi
    done

    if [ "${#args[@]}" -eq 0 ]; then
        remote="origin/$(gitbranch)"
    else
        remote="${args[0]}"
    fi
    git cherry "${opts[@]}" "$(gitbranch)" "$remote"
}

# update another branch and merge it in
# returns 1 on invalid branch, 2 on stash pop failure, 3 on merge failure
gitmerge () {
    local branch="$1"
    [ -z "$branch" ] && {
        echo 1>&2 "[gitmerge] expected branch to merge as argument"
        return 2
    }
    local rtn=0
    local stash=$(gitchanged)
    local origbranch=$(gitbranch)

    echo 1>&2 "[gitmerge] stash"
    [ -n "$stash" ] && git stash
    echo 1>&2 "[gitmerge] update $branch"
    gitup "$branch"
    rtn="$?"
    git checkout "$origbranch"

    # only merge if pull succeeded
    if [ "$rtn" -eq 0 ]; then
        echo 1>&2 "[gitmerge] merge $branch into $origbranch"
        if git merge "$branch"; then
            echo 1>&2 "[gitmerge] merge succeeded; unstash"
            [ -n "$stash" ] && { git stash pop || rtn=2; }
        else
            echo 1>&2 "[gitmerge] merge failed"
            [ -n "$stash" ] && {
                echo 1>&2 "[gitmerge] WARNING: local changes are still stashed"
            }
            rtn=3
        fi
    else
        echo 1>&2 "[gitmerge] update failed; unstash"
        [ -n "$stash" ] && { git stash pop || rtn=2; }
    fi

    return "$rtn"
}

gitfirst () {
    git hash-object -t tree /dev/null
}

gitar () {
    name=$(basename "$(readlink -f ..)")
    if [ -z "$2" ]; then
        ext=tar.gz
    else
        ext=$2
    fi
    git archive HEAD --prefix="$name-$1/" -o"../$name-$1.$ext"
}
