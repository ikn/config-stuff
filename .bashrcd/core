#! /bin/bash

source ~/.profile

export HISTFILESIZE=
export HISTSIZE=
export HISTCONTROL=ignoredups
export HISTFILE=~/.bash_history_real
shopt -s histappend
PS1='\[\e[1;32m\][\u@\h \W]\$\[\e[0m\] '
export HTTP_PROXY="$http_proxy"
export HTTPS_PROXY="$https_proxy"

alias grep='grep --color=auto'
alias less='less -i'
alias ls='ls -F --color=auto'
alias ssh='ssh -t'
alias ag='ag -i'
alias tree='tree -FCa'
alias curl='curl -g'
alias ncdu='ncdu -x'

alias v='vim'
alias l='ls'
alias aw='ag -sw'
alias sedr='sed -r'
alias py='python'
alias :q='exit'
alias pb="curl -F 'sprunge=<-' http://sprunge.us"
alias bc='bc -l'

syntax-highlight () {
    if type -p pygmentize > /dev/null; then
        local args=()
        [ -n "$1" ] && args=(-l "$1")
        pygmentize -f terminal "${args[@]}"
    else
        cat
    fi
}

show () {
    if declare -f "$1" > /dev/null; then
        declare -f "$1" | syntax-highlight bash
    elif alias "$1" &> /dev/null; then
        alias "$1" 2> /dev/null | syntax-highlight bash
    elif [ -n "$(type -p "$1")" ]; then
        local path="$(type -p "$1")"
        if file -biL "$path" | grep -q "^application/"; then
            echo "$path"
        else
            syntax-highlight < "$path"
        fi
    else
        echo >&2 "cannot find '$1'"
        return 1
    fi
}

complete -A alias -A function -A command show

# split arguments by '--' and store in existing `before` and `after` arrays
split_args () {
    local is_after=
    for arg in "$@"; do
        if [ -z "$is_after" ]; then
            if [ "$arg" = "--" ]; then
                is_after=y
            else
                before+=("$arg")
            fi
        else
            after+=("$arg")
        fi
    done
}

# shell-escape all arguments
esc-cmdline () {
    "$PYTHON3" -c "
import sys
import pipes

# make stdout binary so we don't convert newlines
if sys.platform == 'win32':
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

print(' '.join(map(pipes.quote, sys.argv[1:])))
    " "$@"
}

fix-perms () {
    for dir in "$@"; do
        find "$dir" -type d | xargs chmod 755 2> /dev/null
        find "$dir" -type f | xargs chmod 644 2> /dev/null
    done
}

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

nhardlinks () {
    if [ -f "$1" ]; then
        ls -l "$1" | awk '{ print $2 }'
    else
        echo 1>&2 "not a file: $1"
        return 1
    fi
}

search () {
    ag -ug "$@"
}

sumfs () {
   ls -l "$@" | awk '{print $5}' | paste -sd+ - | bc
}

pypi-publish () {
    local gitroot
    gitroot="$(gitroot)" && pushd "$gitroot" && {
        make clean &&
            python3 setup.py sdist bdist_wheel &&
            twine upload dist/*
        popd
    }
}

web () {
    local http_proxy_args=()
    [ -n "$http_proxy" ] && http_proxy_args=(-http-proxy "${http_proxy##*/}")
    local https_proxy_args=()
    [ -n "$https_proxy" ] && \
        https_proxy_args=(-https-proxy "${https_proxy##*/}")
    links "${http_proxy_args[@]}" "${https_proxy_args[@]}" duckduckgo.com
}

urlencode () {
    "$PYTHON3" -c "
import sys
import urllib.parse
if len(sys.argv) > 1 and sys.argv[1] == 'plus':
    quote = urllib.parse.quote_plus
else:
    quote = urllib.parse.quote
print(quote(sys.stdin.read()), end='')
    " "$@"
}

urldecode () {
    "$PYTHON3" -c "
import sys
import urllib.parse
print(urllib.parse.unquote(sys.stdin.read()), end='')
    "
}

openssl-show-cert () {
    openssl x509 -inform pem -noout -text < "$1"
}

find-rss () {
    curl "$1" -L | sed 's/ /\n/g' | grep -i '\(rss\|feed\|atom\)' -B2 -A2
}

ports () {
    watch sudo netstat -tpln
}


# ---- maven


mvn () {
    command mvn -e -DtrimStackTrace=false "$@"
}

mvn-build-modules-arg () {
    local module
    local first=y
    for module in "$@"; do
        [ "$first" = n ] && echo -n ,
        echo -n "$module"
        first=n
    done
}

mvn-get-profiles () {
    local args=()
    [ "$#" -ge 1 ] && args+=(-pl "$1")
    shift
    mvn help:all-profiles "$@" "${args[@]}" >&2 -Doutput=>(cat)
}

mvn-get-plugins () {
    local args=()
    [ "$#" -ge 1 ] && args+=(-pl "$1")
    shift

    mvn help:effective-pom "$@" "${args[@]}" >&2 -Doutput=>(cat) |
        xml2json |
        jshon -C 2> /dev/null \
            -e project -e build -e plugins -e plugin -a -e groupId -u -p -e artifactId -u |
        sed 's/^null$//' |
        while true; do
            read -r groupId || break
            read -r artifactId || break
            echo "$groupId:$artifactId"
        done
}

mvn-generate-site () {
    local args=()
    [ -n "$1" ] && args+=(-pl "$1")
    mvn "${args[@]}" org.apache.maven.plugins:maven-site-plugin:3.7.1:site
}

mvn-generate-site-if-missing () {
    return 0
    [ -f "${1:+./}${1:-.}/target/site/index.html" ] || mvn-generate-site
}

mvn-test-report () {
    local args=()
    [ -n "$1" ] && args+=(-pl "$1")
    mvn-generate-site-if-missing "$@" &&
        mvn "${args[@]}" \
            surefire-report:failsafe-report-only surefire-report:report-only
}

mvn-open-test-report () {
    local report_file="$PWD${1+/}$1/target/site/failsafe-report.html"
    "$WEB_BROWSER" --target=window \
        "file://$(echo -n "$report_file" | urlencode)" &
    disown
}

_complete_mvn-modules () {
    local modules="$(git ls-files |
        grep -- '/pom.xml$' |
        sed 's/\/pom\.xml$//')"
    local IFS=$'\n'
    COMPREPLY=($(compgen -W "$modules" "$2"))
}
complete -F _complete_mvn-modules \
    mvn-get-profiles mvn-generate-site mvn-generate-site-if-missing \
    mvn-test-report mvn-open-test-report


# ---- git


git () {
    case "$1" in
    fetch)
        command git fetch --tags --prune --prune-tags "${@:2}"
        ;;
    *)
        command git "$@"
        ;;
    esac
}

# get the current git branch name
gitbranch () {
    git rev-parse --abbrev-ref HEAD
}

gitfirst () {
    git hash-object -t tree /dev/null
}

git-log-origin () {
    git log "origin/$(git rev-parse --abbrev-ref HEAD)" "$@"
}

gittags () {
    git log --tags --simplify-by-decoration --pretty="format:%ci %d"
}

gitnew () {
    args=()
    opts=()
    for arg in "$@"; do
       if [[ "$arg" == -* ]]; then
            opts+=("$arg")
        else
            args+=("$arg")
        fi
    done
    [ "${#opts[@]}" -eq 0 ] && opts+=('--oneline')

    if [ "${#args[@]}" -eq 0 ]; then
        remote="origin/$(gitbranch)"
    else
        remote="${args[0]}"
    fi
    git log "${opts[@]}" .."$remote"
}

gitfetchnew () {
    git fetch && gitnew && gitnew --stat
}

gitpushnew () {
    git push --set-upstream origin "$(gitbranch)"
}

# get files changed since the last git commit
gitchanged () {
    git diff --name-only HEAD
}

gitag () {
    git diff --relative -z --name-only HEAD | xargs -0 ag "$@" 2> /dev/null
}

alias gitaw='gitag -sw'

# shows the root directory of the git repository you are in
gitroot () {
    git rev-parse --show-toplevel
}

gitar () {
    name=$(basename "$(readlink -f ..)")
    if [ -z "$2" ]; then
        ext=tar.gz
    else
        ext=$2
    fi
    git archive HEAD --prefix="$name-$1/" -o"../$name-$1.$ext"
}

# update another branch and merge it in
# returns 1 on invalid branch, 2 on stash pop failure, 3 on merge failure
gitmerge () {
    local branch="$1"
    [ -z "$branch" ] && {
        echo 1>&2 "[gitmerge] expected branch to merge as argument"
        return 2
    }
    local rtn=0
    local stash=$(gitchanged)
    local origbranch=$(gitbranch)

    echo 1>&2 "[gitmerge] stash"
    [ -n "$stash" ] && git stash
    echo 1>&2 "[gitmerge] update $branch"
    gitup "$branch"
    rtn="$?"
    git checkout "$origbranch"

    # only merge if pull succeeded
    if [ "$rtn" -eq 0 ]; then
        echo 1>&2 "[gitmerge] merge $branch into $origbranch"
        if git merge "$branch"; then
            echo 1>&2 "[gitmerge] merge succeeded; unstash"
            [ -n "$stash" ] && { git stash pop || rtn=2; }
        else
            echo 1>&2 "[gitmerge] merge failed"
            [ -n "$stash" ] && {
                echo 1>&2 "[gitmerge] WARNING: local changes are still stashed"
            }
            rtn=3
        fi
    else
        echo 1>&2 "[gitmerge] update failed; unstash"
        [ -n "$stash" ] && { git stash pop || rtn=2; }
    fi

    return "$rtn"
}

gitresethard () {
    if [ "$#" -eq 0 ]; then
        gitresethard .
    else
        git reset HEAD -- "$@"
        git checkout HEAD -- "$@"
        git clean -fdx -- "$@"
    fi
}

# run before pulling to determine whether a rebase or merge is necessary
gitrebase () {
    local merge=
    local local_changes=
    local remote_changes=
    local current="$(gitbranch)"

    git fetch || return 1

    # check for changes on remote but not local branch
    [ -n "$(git log --oneline "$current"..origin/"$current")" ] && remote_changes=y

    # for each change on local but not remote branch
    for rev in $(git log --format=format:%H origin/"$current".."$current"); do
        local_changes=y
        # branches containing the change, excluding the current local branch
        branches="$(git branch -a --contains "$rev" | grep -v "^*")"
        # should merge if there are any
        if [ -n "$branches" ]; then
            echo 1>&2 "new local commit $rev is contained in branches:"
            echo 1>&2 "$branches"
            echo 1>&2
            merge=y
            break
        fi
    done

    if [ -z "$local_changes" ]; then
        echo "no local changes"
    elif [ -z "$remote_changes" ]; then
        echo "no remote changes"
    elif [ -n "$merge" ]; then
        echo "merge"
    else
        echo "rebase"
    fi
}

# switch to another branch and pull, preserving uncommitted changes
# returns 1 on checkout failure, 2 on stash pop failure
gitup () {
    local rtn=0
    local stash=$(gitchanged)
    [ -n "$stash" ] && git stash
    [ -n "$1" ] && {
        git checkout "$1" || {
            git fetch
            git checkout "$1" || rtn=1
        }
    }
    [ "$rtn" = 0 ] && {
        local action="$(gitrebase)" || rtn=1
        case "$action" in
            "no local changes"|merge)
                git pull || rtn=1
                ;;
            rebase)
                git pull --rebase || rtn=1
                ;;
        esac
    }
    [ -n "$stash" ] && { git stash pop || rtn="${rtn:-2}"; }
    return "$rtn"
}

# determine the 'name' of the current git repository
git-repo-name () {
    cfg_lines="$(git config --local --get-regexp '^remote\.[^.]+\.url$')"
    url="$(echo "$cfg_lines" | cut -s -d" " -f2-)"
    [ -z "$cfg_lines" ] || [ "$(echo "$cfg_lines" | wc -l)" -ne 1 ] && {
        echo >&2 "error: repo doesn't have exactly one remote, or remote.url is not set"
        return 1
    }

    # we may have `host/repo/path` or `host:repo/path`, possibly prefixed by `scheme://` and `user@`
    url_without_scheme="${url#*://}"
    name="$(echo "$url_without_scheme" | cut -s -d: -f2-)"
    [ -z "$name" ] && name="$(echo "$url_without_scheme" | cut -s -d/ -f2-)"
    [ -z "$name" ] && {
        echo >&2 "error: remote url doesn't have a name: $url"
        return 1
    }

    echo "$name"
}


# --- completion


# _complete_first CMD ARG... -- COMPLETE_ARG...
# completion function that completes just the first argument
#   CMD: completion function to run for the first argument (no escaping is performed)
#   ARG: arguments to pass to the command before completion arguments
#   COMPLETE_ARG: normal arguments to a bash completion function
# other arguments are completed with filenames
_complete_first () {
    local before=()
    local after=()
    split_args "$@"

    if [ "$COMP_CWORD" -le 1 ]; then
        "${before[@]}" "${after[@]}"
    else
        COMPREPLY=($(compgen -f "${after[1]}"))
    fi
}

# _complete_upto CMD WORD COMPLETE_ARG...
# completion function that only completes arguments until a specific argument
#   CMD: completion function to run for arguments before WORD (no escaping is performed)
#   WORD: only arguments before an argument equal to this are completed using CMD
#   COMPLETE_ARG: normal arguments to a bash completion function
# other arguments are completed with filenames
_complete_upto () {
    local cmd="$1"
    local word="$2"
    shift 2

    local split=
    for arg in "${COMP_WORDS[@]::$COMP_CWORD}"; do
        [ "$arg" = "$word" ] && { split=y; break; }
    done

    if [ -z "$split" ]; then
        $cmd "$@"
        COMPREPLY=($(compgen -W "$word ${COMPREPLY[*]}" "$2"))
    else
        COMPREPLY=($(compgen -f "$2"))
    fi
}
